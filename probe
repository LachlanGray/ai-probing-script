#! /usr/bin/env python

import argparse
import torch
import numpy as np
import json
import os

def list_params(args):
    """
    list all parameters in a model and their shapes

    list --path pathtomodel
    """
    path = args.path

    model = torch.load(path, map_location=torch.device('cpu'))

    params = model.keys()
    vals = model.values()
    for param, val in zip(params, vals):
        print(param, end="")
        print((60 - len(param)) * " ", end="")
        print(list(val.shape))

def preview_param(args):
    """
    preview a parameter in a model

    preview --path pathtomodel --param nameofparametertoprint --n numberofrowsandcolumns
    """
    path = args.path
    param = args.param
    if not args.n:
        n = 5
    else:
        n = int(args.n)

    model = torch.load(path, map_location=torch.device('cpu'))

    if args.param:
        val = model[param]
        print(val[:n,:n])
        return


def convert_params(args):
    path = args.path
    destination = args.out_dir
    verbose = args.verbose

    # create destination directory if it doesn't exist
    if not os.path.exists(destination):
        os.makedirs(destination)

    model = torch.load(path, map_location=torch.device('cpu'))

    params = model.keys()
    vals = model.values()

    n_params = len(params)
    total = 0

    for param, val in zip(params, vals):
        if verbose:
            print("\033c")
            print(f"({total}/{n_params}) {param}")

        val.to(torch.float32).numpy(force=True).tofile(os.path.join(destination, param + ".bin"))
        total += 1

    del model


def plot_weight_dist(args):
    import matplotlib.pyplot as plt
    import re

    path = args.path
    pattern = args.pattern
    n_bins = int(args.n_bins)

    cutoff = args.cutoff

    if not os.path.exists(os.path.join(path, "histograms")):
        os.makedirs(os.path.join(path, "histograms"))

    if os.path.exists(os.path.join(path, f"histograms/plot-{pattern}_{n_bins}_{args.cutoff}.json")):
        print("loading cache...")
        with open(os.path.join(path, f"histograms/plot-{pattern}_{n_bins}_{args.cutoff}.json"), "r") as f:
            data = json.load(f)
        x = data["x"]
        y = data["y"]
    else:
        # find files in path that match pattern
        files = os.listdir(path)
        files = [f for f in files if re.match(pattern, f)]

        n_files = len(files)
        total = 0

        if args.cutoff == "no-cutoff":
            # find scale
            scale = 0
            for file in files:
                total +=1
                print("\033c")
                print("finding scale...")
                print(f"({total}/{n_files}) {file}")

                weights = np.fromfile(os.path.join(path, file), dtype=np.float32)
                scale = max(scale, np.max(np.abs(weights)))

                del weights
            cutoff = scale
        else:
            scale = float(args.cutoff)
            cutoff = float(args.cutoff)

        assert n_bins % 2 == 0, "thanks"
        bins = {k:0 for k in range(-n_bins//2, n_bins//2)}
        bin_width = 2*scale/(n_bins-1)

        total = 0

        for file in files:
            total +=1
            print("\033c")
            print("counting...")
            print(f"({total}/{n_files}) {file}")

            # load weights
            weights = np.fromfile(os.path.join(path, file), dtype=np.float32)
            weights = weights[:len(weights)//2]

            # if custom cutoff, filter weights
            if args.cutoff:
                weights = weights[np.where(np.abs(weights) <= cutoff)]

            weights = np.floor(weights / bin_width)
            unique, counts = np.unique(weights, return_counts=True)
            for u, c in zip(unique, counts):
                if abs(u) > n_bins//2 - 1:
                    continue
                bins[u] += c

            del weights

        x = [k*bin_width for k in bins.keys() ]
        y = list(bins.values())


        def default_serializer(obj):
            if isinstance(obj, np.integer):
                return int(obj)
            raise TypeError(f"Object of type {type(obj).__name__} is not JSON serializable")

        with open(os.path.join(path, f"histograms/plot-{pattern}_{n_bins}_{args.cutoff}.json"), "w") as f:
            json.dump({"x": x, "y": y}, f, default=default_serializer)

        # # cache results
        # with open(os.path.join(path, f"plot_{pattern}_{n_bins}.json"), "w") as f:
        #     json.dump({"x":x, "y":y}, f)

    if args.cutoff != "no-cutoff":
        cutoff= float(args.cutoff)
        filtered_data = [(x, y) for x, y in zip(x, y) if abs(x) <= cutoff]

        x, y = zip(*filtered_data)

    plt.plot(x,y)
    plt.show()


def main():
    parser = argparse.ArgumentParser()

    subparser = parser.add_subparsers()

    list_parser = subparser.add_parser("inspect", help="list parameters in a model and their sizes")
    list_parser.add_argument("--path", type=str, required=True, help="path to .pth file")
    list_parser.set_defaults(func=list_params)

    list_parser = subparser.add_parser("preview", help="preview a parameter in a model")
    list_parser.add_argument("--path", type=str, required=True, help="path to .pth file")
    list_parser.add_argument("--param", type=str, required=True, help="name of parameter to preview")
    list_parser.add_argument("-n", type=str, required=False, help="number of rows and columns to preview")
    list_parser.set_defaults(func=preview_param)

    convert_parser = subparser.add_parser("convert", help="convert a .pth file to .bin files")
    convert_parser.add_argument("--path", type=str, required=True, help="path to .pth file")
    convert_parser.add_argument("--out-dir", type=str, required=True, help="path to output directory")
    convert_parser.add_argument("--verbose", type=bool, required=False, default=True, help="print progress")
    convert_parser.set_defaults(func=convert_params)

    plot_parser = subparser.add_parser("plot", help="plot the distribution of weights in a model")
    plot_parser.add_argument("--path", type=str, required=True, help="path to folder with parameter binaries")
    plot_parser.add_argument("--pattern", type=str, required=False, default=".*", help="regex pattern to match parameter names")
    plot_parser.add_argument("--n-bins", type=int, required=False, default=100, help="number of bins")
    plot_parser.add_argument("--cutoff", default="no-cutoff", required=False, help="cutoff for plotting")
    plot_parser.set_defaults(func=plot_weight_dist)

    args = parser.parse_args()

    if 'func' in args:
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()

